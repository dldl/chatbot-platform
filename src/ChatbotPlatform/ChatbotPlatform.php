<?php

namespace ChatbotPlatform;

use ChatbotPlatform\Event\MessageEvent;
use ChatbotPlatform\Event\RequestEvent;
use ChatbotPlatform\Event\ResponseEvent;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class ChatbotPlatform
{
    private $dispatcher;

    public function __construct(array $handlers, array $actions)
    {
        $this->dispatcher = new EventDispatcher();

        foreach ($handlers as $handler) {
            $this->dispatcher->addListener(ChatbotEvents::REQUEST, [$handler, 'onRequest']);
            $this->dispatcher->addListener(ChatbotEvents::RESPONSE, [$handler, 'onResponse']);
        }

        foreach ($actions as $action) {
            $this->dispatcher->addListener(ChatbotEvents::MESSAGE, [$action, 'onMessage']);
        }
    }

    public function handleRequest(Request $request): Response
    {
        $requestEvent = new RequestEvent($request);
        $this->dispatcher->dispatch(ChatbotEvents::REQUEST, $requestEvent);

        if (null === $requestEvent->getMessage()) {
            return $this->buildJsonResponse(
              ['error' => 'No message handler found for current request.'],
              Response::HTTP_BAD_REQUEST
            );
        }

        $messageEvent = new MessageEvent($requestEvent->getMessage());
        $this->dispatcher->dispatch(ChatbotEvents::MESSAGE, $messageEvent);

        if (!$messageEvent->hasResponse()) {
            return $this->buildJsonResponse(
              ['notice' => 'No response generated by any action.'],
              Response::HTTP_OK
            );
        }

        $responseEvent = new ResponseEvent($messageEvent->getResponse());
        $this->dispatcher->dispatch(ChatbotEvents::RESPONSE, $responseEvent);

        if (!$responseEvent->hasRawResponse()) {
            return $this->buildJsonResponse(
              ['error' => 'No handler able to handle generated response.'],
              Response::HTTP_UNPROCESSABLE_ENTITY
            );
        }

        return $this->buildJsonResponse($responseEvent->getRawResponse());
    }

    private function buildJsonResponse($content, int $status = Response::HTTP_OK)
    {
        $response = new Response(json_encode($content), $status);
        $response->headers->add([
            'content-type' => 'application/json',
        ]);

        return $response;
    }
}
